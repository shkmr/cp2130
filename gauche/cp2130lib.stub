;;;
;;; cp2130lib.stub
;;;

"
#include \"cp2130.h\"
"
(define-cptr <cp2130> :private "cp2130_t"
  "SCM_CP2130Class"
  "SCM_IS_CP2130"
  "SCM_BOX_CP2130"
  "SCM_UNBOX_CP2130")

(define-cproc cp2130-open (vendor::<int> product::<int>)
              ::<cp2130>
  (return (cp2130_open vendor product)))

(define-cproc cp2130-close (dev::<cp2130>)
              ::<void>
  (cp2130_close dev))

;;
;;     Data transfer
;;
(define-cproc cp2130-read (dev::<cp2130> buf::<u8vector> len::<int>)
              ::<int>
  (if (or (< len 0)
          (> len (SCM_UVECTOR_SIZE buf)))
    (return (cp2130_read dev (SCM_UVECTOR_ELEMENTS buf) (SCM_UVECTOR_SIZE buf)))
    (return (cp2130_read dev (SCM_UVECTOR_ELEMENTS buf) len))))

(define-cproc cp2130-write (dev::<cp2130> buf::<u8vector> len::<int>)
              ::<int>
  (if (or (< len 0)
          (> len (SCM_UVECTOR_SIZE buf)))
    (return (cp2130_write dev (SCM_UVECTOR_ELEMENTS buf) (SCM_UVECTOR_SIZE buf)))
    (return (cp2130_write dev (SCM_UVECTOR_ELEMENTS buf) len))))

(define-cproc cp2130-write-read (dev::<cp2130> buf::<u8vector> len::<int>)
              ::<int>
  (if (or (< len 0)
          (> len (SCM_UVECTOR_SIZE buf)))
    (return (cp2130_write_read dev (SCM_UVECTOR_ELEMENTS buf) (SCM_UVECTOR_SIZE buf)))
    (return (cp2130_write_read dev (SCM_UVECTOR_ELEMENTS buf) len))))

;;
;;      Device-to-Host
;;
(define-cproc cp2130-get-clock-divider (dev::<cp2130>)
              ::<int>
  (return (cp2130_get_clock_divider dev)))

(define-cproc cp2130-get-event-counter (dev::<cp2130>)
              ::(<int> <int>)
  (let* ((mode  :: int)
         (count :: int))
    (cp2130_get_event_counter dev (& mode) (& count))
    (return mode count)))

(define-cproc cp2130-get-full-threshold (dev::<cp2130>)
              ::<int>
  (return (cp2130_get_full_threshold dev)))

(define-cproc cp2130-get-gpio-chip-select (dev::<cp2130>)
              ::(<int> <int>)
  (let* ((ch  :: int)
         (pin :: int))
    (cp2130_get_gpio_chip_select dev (& ch) (& pin))
    (return ch pin)))

(define-cproc cp2130-get-gpio-mode-and-level (dev::<cp2130>)
              ::(<int> <int>)
  (let* ((mode  :: int)
         (level :: int))
    (cp2130_get_gpio_mode_and_level dev (& mode) (& level))
    (return mode level)))

(define-cproc cp2130-get-gpio-values (dev::<cp2130>)
              ::<int>
  (return (cp2130_get_gpio_values dev)))

(define-cproc cp2130-get-rtr-state (dev::<cp2130>)
              ::<int>
  (return (cp2130_get_rtr_state dev)))

(define-cproc cp2130-get-spi-word (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (if (>= (SCM_UVECTOR_SIZE buf) 11)
    (cp2130_get_spi_word dev (SCM_UVECTOR_ELEMENTS buf))))


#;(define-cproc cp2130-get-spi-delay (dev::<cp2130> channel::<int>)
              ::(<int> <int> <int> <int>)
  (let* ((mask               :: int)
         (inter_byte_delay   :: int)
         (post_assert_delay  :: int)
         (pre_deassert_delay :: int))
    (cp2130_get_spi_delay dev channel
                          (& mask)
                          (& inter_byte_delay)
                          (& post_assert_delay)
                          (& pre_deassert_delay))
    (return mask
            inter_byte_delay
            post_assert_delay
            pre_deassert_delay)))

(define-cproc cp2130-get-readonly-version (dev::<cp2130>)
              ::(<int> <int>)
  (let* ((major :: int)
         (minor :: int))
    (cp2130_get_readonly_version dev (& major) (& minor))
    (return major minor)))

;;
;;      Host-to-Device
;;

(define-cproc cp2130-reset-device (dev::<cp2130>)
              ::<void>
  (cp2130_reset_device dev))

(define-cproc cp2130-set-clock-divider (dev::<cp2130> divider::<int>)
              ::<void>
  (cp2130_set_clock_divider dev divider))

(define-cproc cp2130-set-event-counter (dev::<cp2130> mode::<int> count::<int>)
              ::<void>
  (cp2130_set_event_counter dev mode count))

(define-cproc cp2130-set-full-threshold (dev::<cp2130> threshold::<int>)
              ::<void>
  (cp2130_set_full_threshold dev threshold))

(define-cproc cp2130-set-gpio-chip-select (dev::<cp2130> channel::<int> control::<int>)
              ::<void>
  (cp2130_set_gpio_chip_select dev channel control))

(define-cproc cp2130-set-gpio-mode-and-level (dev::<cp2130> index::<int> mode::<int> level::<int>)
              ::<void>
  (cp2130_set_gpio_mode_and_level dev index mode level))

(define-cproc cp2130-set-gpio-values (dev::<cp2130> level::<int> mask::<int>)
              ::<void>
  (cp2130_set_gpio_values dev level mask))

(define-cproc cp2130-set-rtr-stop (dev::<cp2130> val::<int>)
              ::<void>
  (cp2130_set_rtr_stop dev val))

(define-cproc cp2130-set-spi-word (dev::<cp2130> channel::<int> word::<int>)
              ::<void>
  (cp2130_set_spi_word dev channel word))

(define-cproc cp2130-set-spi-delay (dev::<cp2130> channel::<int>
                                                  mask::<int>
                                                  inter_byte_delay::<int>
                                                  post_assert_delay::<int>
                                                  pre_deassert_delay::<int>)
              ::<void>
  (cp2130_set_spi_delay dev channel mask
                        inter_byte_delay
                        post_assert_delay
                        pre_deassert_delay))

;;
;;  OPT ROM Configuration Commands.  Device-to-Host
;;

(define-cproc cp2130otp-get-lock-byte (dev::<cp2130>)
              ::<int>
  (return (cp2130otp_get_lock_byte dev)))

(define-cproc cp2130otp-get-manufacturing-string& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (cp2130otp_get_manufacturing_string dev
                                      (SCM_UVECTOR_ELEMENTS buf)
                                      (SCM_UVECTOR_SIZE buf)))

(define-cproc cp2130otp-get-pin-config& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (if (>= (SCM_UVECTOR_SIZE buf) 20)
    (cp2130otp_get_pin_config dev (SCM_UVECTOR_ELEMENTS buf))))

(define-cproc cp2130otp-get-product-string& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (cp2130otp_get_product_string dev
                                (SCM_UVECTOR_ELEMENTS buf)
                                (SCM_UVECTOR_SIZE buf)))

(define-cproc cp2130otp-get-prom-config& (dev::<cp2130> index::<int> buf::<u8vector>)
              ::<void>
  (if (and (>= (SCM_UVECTOR_SIZE buf) 64)
           (>= index 0)
           (<= index 10))
    (cp2130otp_get_prom_config dev index (SCM_UVECTOR_ELEMENTS buf))))

(define-cproc cp2130otp-get-serial-string& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (cp2130otp_get_serial_string dev
                               (SCM_UVECTOR_ELEMENTS buf)
                               (SCM_UVECTOR_SIZE buf)))

(define-cproc cp2130otp-get-usb-config& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (if (>= (SCM_UVECTOR_SIZE buf) 9)
    (cp2130otp_get_usb_config dev (SCM_UVECTOR_ELEMENTS buf))))

;;
;;  OPT ROM Configuration Commands.  Host-to-Device.
;;

(define-cproc c2130otp-set-memory-key (dev::<cp2130> key::<int>)
              ::<void>
  (cp2130otp_set_memory_key dev key))

(define-cproc cp2130otp-set-lock-byte& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (if (>= (SCM_UVECTOR_SIZE buf) 2)
    (cp2130otp_set_lock_byte dev (SCM_UVECTOR_ELEMENTS buf))))

(define-cproc cp2130otp-set-manufacturing-string& (dev::<cp2130> utf16::<u8vector>)
              ::<void>
  (cp2130otp_set_manufacturing-string dev
                                      (SCM_UVECTOR_ELEMENTS utf16)
                                      (SCM_UVECTOR_SIZE utf16)))

(define-cproc cp2130otp-set-pin-config& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (if (>= (SCM_UVECTOR_SIZE buf) 20)
    (cp2130otp_set_pin_config dev (SCM_UVECTOR_ELEMENTS buf))))

(define-cproc cp2130otp-set-product-string& (dev::<cp2130> utf16::<u8vector>)
              ::<void>
  (cp2130otp_set_product-string dev
                                (SCM_UVECTOR_ELEMENTS utf16)
                                (SCM_UVECTOR_SIZE utf16)))

(define-cproc cp2130otp-set-prom-config& (dev::<cp2130> index::<int> buf::<u8vector>)
              ::<void>
  (if (>= (SCM_UVECTOR_SIZE buf) 64)
    (cp2130otp_set_prom_config dev index (SCM_UVECTOR_ELEMENTS buf))))

(define-cproc cp2130otp-set-serial-string& (dev::<cp2130> utf16::<u8vector>)
              ::<void>
  (cp2130otp_set_serial-string dev
                               (SCM_UVECTOR_ELEMENTS utf16)
                               (SCM_UVECTOR_SIZE utf16)))

(define-cproc cp2130otp-set-usb-config& (dev::<cp2130> buf::<u8vector>)
              ::<void>
  (if (>= (SCM_UVECTOR_SIZE buf) 10)
    (cp2130otp_set_usb_config dev (SCM_UVECTOR_ELEMENTS buf))))

;;
;;       Convenience
;;
(define-cproc cp2130-get-event-counter-count (dev::<cp2130>) ::<int> (return (cp2130_get_event_counter_count dev)))
(define-cproc cp2130-get-event-counter-mode  (dev::<cp2130>) ::<int> (return (cp2130_get_event_counter_mode  dev)))

(define-cproc cp2130-get-gpio00   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio00 dev)))
(define-cproc cp2130-get-gpio01   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio01 dev)))
(define-cproc cp2130-get-gpio02   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio02 dev)))
(define-cproc cp2130-get-gpio03   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio03 dev)))
(define-cproc cp2130-get-gpio04   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio04 dev)))
(define-cproc cp2130-get-gpio05   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio05 dev)))
(define-cproc cp2130-get-gpio06   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio06 dev)))
(define-cproc cp2130-get-gpio07   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio07 dev)))
(define-cproc cp2130-get-gpio08   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio08 dev)))
(define-cproc cp2130-get-gpio09   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio09 dev)))
(define-cproc cp2130-get-gpio10   (dev::<cp2130>) ::<int> (return (cp2130_get_gpio10 dev)))

(define-cproc cp2130-set-gpio00   (dev::<cp2130>) ::<void> (cp2130_set_gpio00 dev))
(define-cproc cp2130-set-gpio01   (dev::<cp2130>) ::<void> (cp2130_set_gpio01 dev))
(define-cproc cp2130-set-gpio02   (dev::<cp2130>) ::<void> (cp2130_set_gpio02 dev))
(define-cproc cp2130-set-gpio03   (dev::<cp2130>) ::<void> (cp2130_set_gpio03 dev))
(define-cproc cp2130-set-gpio04   (dev::<cp2130>) ::<void> (cp2130_set_gpio04 dev))
(define-cproc cp2130-set-gpio05   (dev::<cp2130>) ::<void> (cp2130_set_gpio05 dev))
(define-cproc cp2130-set-gpio06   (dev::<cp2130>) ::<void> (cp2130_set_gpio06 dev))
(define-cproc cp2130-set-gpio07   (dev::<cp2130>) ::<void> (cp2130_set_gpio07 dev))
(define-cproc cp2130-set-gpio08   (dev::<cp2130>) ::<void> (cp2130_set_gpio08 dev))
(define-cproc cp2130-set-gpio09   (dev::<cp2130>) ::<void> (cp2130_set_gpio09 dev))
(define-cproc cp2130-set-gpio10   (dev::<cp2130>) ::<void> (cp2130_set_gpio10 dev))

(define-cproc cp2130-reset-gpio00 (dev::<cp2130>) ::<void> (cp2130_reset_gpio00 dev))
(define-cproc cp2130-reset-gpio01 (dev::<cp2130>) ::<void> (cp2130_reset_gpio01 dev))
(define-cproc cp2130-reset-gpio02 (dev::<cp2130>) ::<void> (cp2130_reset_gpio02 dev))
(define-cproc cp2130-reset-gpio03 (dev::<cp2130>) ::<void> (cp2130_reset_gpio03 dev))
(define-cproc cp2130-reset-gpio04 (dev::<cp2130>) ::<void> (cp2130_reset_gpio04 dev))
(define-cproc cp2130-reset-gpio05 (dev::<cp2130>) ::<void> (cp2130_reset_gpio05 dev))
(define-cproc cp2130-reset-gpio06 (dev::<cp2130>) ::<void> (cp2130_reset_gpio06 dev))
(define-cproc cp2130-reset-gpio07 (dev::<cp2130>) ::<void> (cp2130_reset_gpio07 dev))
(define-cproc cp2130-reset-gpio08 (dev::<cp2130>) ::<void> (cp2130_reset_gpio08 dev))
(define-cproc cp2130-reset-gpio09 (dev::<cp2130>) ::<void> (cp2130_reset_gpio09 dev))
(define-cproc cp2130-reset-gpio10 (dev::<cp2130>) ::<void> (cp2130_reset_gpio10 dev))

;; Local variables:
;; mode: scheme
;; end:
